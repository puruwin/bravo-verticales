---
import data from "../data.json";

const { empresa, servicios, contacto } = data;
---

<!-- Modal Overlay -->
<div
  id="contact-modal"
  class="fixed inset-0 bg-black/50 backdrop-blur-sm z-50 hidden opacity-0 transition-opacity duration-300"
  role="dialog"
  aria-modal="true"
  aria-labelledby="modal-title"
  aria-describedby="modal-description"
>
  <!-- Modal Content -->
  <div class="fixed inset-0 flex items-center justify-center p-4">
    <div
      id="modal-content"
      class="bg-white rounded-2xl shadow-2xl max-w-4xl w-full max-h-[90vh] overflow-y-auto transform scale-95 transition-transform duration-300"
      role="document"
    >
      <!-- Modal Header -->
      <div
        class="sticky top-0 bg-white border-b border-gray-200 px-6 py-4 rounded-t-2xl"
      >
        <div class="flex items-center justify-between">
          <div>
            <h2 id="modal-title" class="text-2xl font-bold text-primary">
              Solicita tu Presupuesto
            </h2>
            <p id="modal-description" class="text-gray-600 mt-1">
              Obtén una estimación gratuita para tu proyecto
            </p>
          </div>
          <button
            id="close-modal"
            class="p-2 hover:bg-gray-100 rounded-full transition-colors"
            aria-label="Cerrar modal"
            tabindex="0"
            type="button"
          >
            <svg
              class="w-6 h-6 text-gray-500 pointer-events-none"
              fill="none"
              stroke="currentColor"
              viewBox="0 0 24 24"
            >
              <path
                stroke-linecap="round"
                stroke-linejoin="round"
                stroke-width="2"
                d="M6 18L18 6M6 6l12 12"></path>
            </svg>
          </button>
        </div>
      </div>

      <!-- Modal Body -->
      <div class="p-6">
        <div class="grid grid-cols-1 lg:grid-cols-2 gap-8">
          <!-- Contact Form -->
          <div>
            <h3 class="text-xl font-semibold text-primary mb-6">
              Completa el Formulario
            </h3>

            <form
              action="https://formspree.io/f/xovkqqbe"
              method="POST"
              class="space-y-6"
              id="modal-contact-form"
            >
              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    for="modal-nombre"
                    class="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Nombre *
                  </label>
                  <input
                    type="text"
                    id="modal-nombre"
                    name="nombre"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                    placeholder="Tu nombre completo"
                  />
                </div>

                <div>
                  <label
                    for="modal-empresa"
                    class="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Empresa
                  </label>
                  <input
                    type="text"
                    id="modal-empresa"
                    name="empresa"
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                    placeholder="Nombre de tu empresa"
                  />
                </div>
              </div>

              <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <label
                    for="modal-email"
                    class="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Email *
                  </label>
                  <input
                    type="email"
                    id="modal-email"
                    name="email"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                    placeholder="tu@email.com"
                  />
                </div>

                <div>
                  <label
                    for="modal-telefono"
                    class="block text-sm font-medium text-gray-700 mb-2"
                  >
                    Teléfono *
                  </label>
                  <input
                    type="tel"
                    id="modal-telefono"
                    name="telefono"
                    required
                    class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                    placeholder="+34 600 000 000"
                  />
                </div>
              </div>

              <div>
                <label
                  for="modal-servicio"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Tipo de Servicio *
                </label>
                <select
                  id="modal-servicio"
                  name="servicio"
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                >
                  <option value="">Selecciona un servicio</option>
                  {
                    servicios.map((servicio) => (
                      <option value={servicio.id}>{servicio.nombre}</option>
                    ))
                  }
                  <option value="otro">Otro</option>
                </select>
              </div>

              <div>
                <label
                  for="modal-mensaje"
                  class="block text-sm font-medium text-gray-700 mb-2"
                >
                  Descripción del Proyecto *
                </label>
                <textarea
                  id="modal-mensaje"
                  name="mensaje"
                  rows="4"
                  required
                  class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-primary focus:border-transparent transition-colors"
                  placeholder="Describe tu proyecto, ubicación, altura, fechas preferidas, etc."
                ></textarea>
              </div>

              <div class="flex items-start">
                <input
                  type="checkbox"
                  id="modal-privacidad"
                  name="privacidad"
                  required
                  class="mt-1 h-4 w-4 text-primary focus:ring-primary border-gray-300 rounded"
                />
                <label
                  for="modal-privacidad"
                  class="ml-2 text-sm text-gray-600"
                >
                  Acepto la <a
                    href="/politica-de-privacidad"
                    class="text-primary hover:underline"
                    >política de privacidad</a
                  > y el tratamiento de mis datos personales. *
                </label>
              </div>

              <button
                type="submit"
                class="w-full bg-primary text-white py-4 px-6 rounded-lg font-semibold hover:bg-blue-700 transform hover:scale-105 transition-all duration-300 shadow-lg"
              >
                Enviar Solicitud
              </button>
            </form>
          </div>

          <!-- Contact Information -->
          <div class="space-y-6">
            <div>
              <h3 class="text-xl font-semibold text-primary mb-6">
                Información de Contacto
              </h3>

              <div class="space-y-6">
                <div class="flex items-start">
                  <div
                    class="w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 flex-shrink-0"
                  >
                    <svg
                      class="w-6 h-6 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M17.657 16.657L13.414 20.9a1.998 1.998 0 01-2.827 0l-4.244-4.243a8 8 0 1111.314 0z"
                      ></path>
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M15 11a3 3 0 11-6 0 3 3 0 016 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-primary mb-1">Ubicación</h4>
                    <p class="text-gray-600">
                      {contacto.ubicacion}
                    </p>
                  </div>
                </div>

                <div class="flex items-start">
                  <div
                    class="w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 flex-shrink-0"
                  >
                    <svg
                      class="w-6 h-6 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 5a2 2 0 012-2h3.28a1 1 0 01.948.684l1.498 4.493a1 1 0 01-.502 1.21l-2.257 1.13a11.042 11.042 0 005.516 5.516l1.13-2.257a1 1 0 011.21-.502l4.493 1.498a1 1 0 01.684.949V19a2 2 0 01-2 2h-1C9.716 21 3 14.284 3 6V5z"
                      ></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-primary mb-1">Teléfono</h4>
                    <a
                      href={`tel:${contacto.telefono}`}
                      class="text-secondary hover:text-yellow-600 transition-colors"
                    >
                      {contacto.telefono}
                    </a>
                  </div>
                </div>

                <div class="flex items-start">
                  <div
                    class="w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 flex-shrink-0"
                  >
                    <svg
                      class="w-6 h-6 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"
                      ></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-primary mb-1">Email</h4>
                    <a
                      href={`mailto:${contacto.email}`}
                      class="text-secondary hover:text-yellow-600 transition-colors"
                    >
                      {contacto.email}
                    </a>
                  </div>
                </div>

                <div class="flex items-start">
                  <div
                    class="w-12 h-12 bg-primary rounded-lg flex items-center justify-center mr-4 flex-shrink-0"
                  >
                    <svg
                      class="w-6 h-6 text-white"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                  </div>
                  <div>
                    <h4 class="font-semibold text-primary mb-1">
                      Horario de Atención
                    </h4>
                    <p class="text-gray-600">
                      {contacto.horarios}
                    </p>
                  </div>
                </div>
              </div>
            </div>

            <!-- Emergency Contact -->
            <!-- <div class="bg-red-50 border border-red-200 p-6 rounded-lg">
              <div class="flex items-center mb-4">
                <div
                  class="w-10 h-10 bg-red-500 rounded-full flex items-center justify-center mr-3"
                >
                  <svg
                    class="w-6 h-6 text-white"
                    fill="none"
                    stroke="currentColor"
                    viewBox="0 0 24 24"
                  >
                    <path
                      stroke-linecap="round"
                      stroke-linejoin="round"
                      stroke-width="2"
                      d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"
                    ></path>
                  </svg>
                </div>
                <h4 class="text-lg font-bold text-red-800">Emergencias 24/7</h4>
              </div>
              <p class="text-red-700 mb-3">
                ¿Necesitas asistencia urgente? Nuestro equipo de emergencias
                está disponible las 24 horas.
              </p>
              <a
                href={`tel:${contacto.telefono}`}
                class="inline-block bg-red-600 text-white px-6 py-3 rounded-lg font-semibold hover:bg-red-700 transition-colors"
              >
                Llamar Ahora
              </a>
            </div> -->
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  // Modal functionality
  const modal = document.getElementById("contact-modal") as HTMLElement;
  const closeButton = document.getElementById("close-modal") as HTMLElement;
  const modalForm = document.getElementById(
    "modal-contact-form",
  ) as HTMLFormElement;

  // Open modal function
  const openModal = () => {
    if (modal) {
      modal.classList.remove("hidden");
      document.body.style.overflow = "hidden";

      // Trigger animations
      setTimeout(() => {
        modal.classList.remove("opacity-0");
        const modalContent = document.getElementById("modal-content");
        if (modalContent) {
          modalContent.classList.remove("scale-95");
          modalContent.classList.add("scale-100");
        }
      }, 10);

      // Focus management - focus on the first input
      const firstInput = modal.querySelector("input") as HTMLInputElement;
      if (firstInput) {
        setTimeout(() => firstInput.focus(), 100);
      }

      // Add escape key listener
      const handleEscape = (e: KeyboardEvent) => {
        if (e.key === "Escape") {
          closeModal();
          document.removeEventListener("keydown", handleEscape);
        }
      };
      document.addEventListener("keydown", handleEscape);
    }
  };

  // Close modal function
  const closeModal = () => {
    if (modal) {
      // Trigger close animations
      modal.classList.add("opacity-0");
      const modalContent = document.getElementById("modal-content");
      if (modalContent) {
        modalContent.classList.remove("scale-100");
        modalContent.classList.add("scale-95");
      }

      // Hide modal after animation
      setTimeout(() => {
        modal.classList.add("hidden");
        document.body.style.overflow = "";
      }, 300);
    }
  };

  // Event listeners
  if (closeButton) {
    closeButton.addEventListener("click", (e: MouseEvent) => {
      e.preventDefault();
      e.stopPropagation();
      closeModal();
    });
    closeButton.addEventListener("keydown", (e: KeyboardEvent) => {
      if (e.key === "Enter" || e.key === " ") {
        e.preventDefault();
        e.stopPropagation();
        closeModal();
      }
    });
  }

  // Alternative event delegation approach
  document.addEventListener("click", (e: MouseEvent) => {
    const target = e.target as HTMLElement;
    if (target && target.id === "close-modal") {
      e.preventDefault();
      e.stopPropagation();
      closeModal();
    }
  });

  // Close modal when clicking outside
  if (modal) {
    modal.addEventListener("click", (e: MouseEvent) => {
      if (e.target === modal) {
        closeModal();
      }
    });
  }

  // Trap focus within modal when it's open
  const trapFocus = (e: KeyboardEvent) => {
    if (!modal || modal.classList.contains("hidden")) return;

    const focusableElements = modal.querySelectorAll(
      'button, [href], input, select, textarea, [tabindex]:not([tabindex="-1"])',
    );
    const firstElement = focusableElements[0] as HTMLElement;
    const lastElement = focusableElements[
      focusableElements.length - 1
    ] as HTMLElement;

    if (e.key === "Tab") {
      if (e.shiftKey) {
        if (document.activeElement === firstElement) {
          lastElement.focus();
          e.preventDefault();
        }
      } else {
        if (document.activeElement === lastElement) {
          firstElement.focus();
          e.preventDefault();
        }
      }
    }
  };

  document.addEventListener("keydown", trapFocus);

  // Form validation and submission handling
  const handleModalFormSubmit = async (event: Event) => {
    event.preventDefault();
    const form = event.target as HTMLFormElement;

    // Simple validation
    const requiredFields = [
      "nombre",
      "email",
      "telefono",
      "servicio",
      "mensaje",
      "privacidad",
    ];
    let isValid = true;

    requiredFields.forEach((field) => {
      const element = form.querySelector(
        `[name="${field}"]`,
      ) as HTMLInputElement;
      if (!element || !element.value) {
        isValid = false;
        element?.classList.add("border-red-500");
      } else {
        element?.classList.remove("border-red-500");
      }
    });

    if (!isValid) {
      showNotification(
        "Por favor, completa todos los campos obligatorios.",
        "error",
      );
      return;
    }

    // Show loading state
    const submitButton = form.querySelector(
      'button[type="submit"]',
    ) as HTMLButtonElement;
    const originalText = submitButton.textContent;

    if (submitButton) {
      submitButton.disabled = true;
      submitButton.textContent = "Enviando...";
    }

    try {
      // Submit to Formspree using fetch
      const formData = new FormData(form);
      const response = await fetch(form.action, {
        method: "POST",
        body: formData,
        headers: {
          Accept: "application/json",
        },
      });

      if (response.ok) {
        showNotification(
          "¡Gracias por tu solicitud! Nos pondremos en contacto contigo en las próximas 24 horas.",
          "success",
        );
        form.reset();
        closeModal();
      } else {
        throw new Error("Error en el envío");
      }
    } catch (error) {
      showNotification(
        "Hubo un error al enviar tu solicitud. Por favor, inténtalo de nuevo o contáctanos directamente.",
        "error",
      );
    } finally {
      // Reset button state
      if (submitButton) {
        submitButton.disabled = false;
        submitButton.textContent = originalText;
      }
    }
  };

  if (modalForm) {
    modalForm.addEventListener("submit", handleModalFormSubmit);
  }

  // Notification system
  const showNotification = (message: string, type: "success" | "error") => {
    // Remove existing notification if any
    const existingNotification = document.getElementById("notification-modal");
    if (existingNotification) {
      existingNotification.remove();
    }

    // Create notification modal
    const notification = document.createElement("div");
    notification.id = "notification-modal";
    notification.className =
      "fixed inset-0 bg-black/50 backdrop-blur-sm z-50 flex items-center justify-center p-4";
    notification.innerHTML = `
      <div class="bg-white rounded-2xl shadow-2xl max-w-md w-full p-6 transform scale-95 transition-transform duration-300">
        <div class="text-center">
          <div class="w-16 h-16 mx-auto mb-4 rounded-full flex items-center justify-center ${
            type === "success" ? "bg-green-100" : "bg-red-100"
          }">
            <svg class="w-8 h-8 ${type === "success" ? "text-green-600" : "text-red-600"}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
              ${
                type === "success"
                  ? '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>'
                  : '<path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>'
              }
            </svg>
          </div>
          <h3 class="text-xl font-semibold text-gray-900 mb-2">
            ${type === "success" ? "¡Enviado correctamente!" : "Error"}
          </h3>
          <p class="text-gray-600 mb-6">${message}</p>
          <button 
            id="close-notification" 
            class="w-full bg-primary text-white py-3 px-6 rounded-lg font-semibold hover:bg-blue-700 transition-colors"
          >
            Entendido
          </button>
        </div>
      </div>
    `;

    document.body.appendChild(notification);

    // Animate in
    setTimeout(() => {
      const modalContent = notification.querySelector("div > div");
      if (modalContent) {
        modalContent.classList.remove("scale-95");
        modalContent.classList.add("scale-100");
      }
    }, 10);

    // Close notification
    const closeNotification = () => {
      const modalContent = notification.querySelector("div > div");
      if (modalContent) {
        modalContent.classList.remove("scale-100");
        modalContent.classList.add("scale-95");
      }
      setTimeout(() => {
        notification.remove();
      }, 300);
    };

    // Event listeners
    const closeButton = notification.querySelector("#close-notification");
    if (closeButton) {
      closeButton.addEventListener("click", closeNotification);
    }

    // Close on outside click
    notification.addEventListener("click", (e) => {
      if (e.target === notification) {
        closeNotification();
      }
    });

    // Auto close after 5 seconds for success messages
    if (type === "success") {
      setTimeout(closeNotification, 5000);
    }
  };

  // Make openModal function globally available
  (window as any).openContactModal = openModal;
</script>
